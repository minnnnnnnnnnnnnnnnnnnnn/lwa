@page "/laws"
@inject HttpClient Http
@inject NavigationManager N

<div class="bread">
    <span>現在位置：</span>
    <ul>
        <li><a href="">首頁</a></li>
        <li>法規查詢</li>
    </ul>
</div>
<PageTitle>法規查詢 - 臺中市立臺中第一高級中等學校學生自治聯合會法規資料庫</PageTitle>
<form action="laws" method="get" class="lq">
    <label for="lqc">類別：</label>
    <select name="c" id="c">
        <option value="">不限</option>
        <option value="c">中央法規</option>
        <option value="ex">行政法規</option>
        <option value="l">立法法規</option>
        <option value="j">司法法規</option>
        <option value="el">選舉法規</option>
    </select>
    <label for="ab">狀態：</label>
    <select name="ab" id="ab">
        <option value="">不限</option>
        <option value="false">一般</option>
        <option value="true">廢止</option>
    </select>
    <label for="lv">位階：</label>
    <select name="l" id="lv">
        <option value="">不限</option>
        <option value="章程">章程</option>
        <option value="法律">法律</option>
        <option value="命令">命令</option>
    </select>
    <p>
        <input type="search" placeholder="輸入關鍵字以搜尋" name="q" />
        <input type="submit" style="background-image:url(i/icon/search.svg);width:24px;height:24px;background-color:#0000;border:0;cursor:pointer;" value="" alt="搜尋！" />
    </p>
</form>
<select @onchange="Sort">
    <option value="latest">最後異動日期（新 > 舊）</option>
    <option value="oldest">最後異動日期（舊 > 新）</option>
    <option value="AtoZ">筆劃（少 > 多）</option>
    <option value="ZtoA">筆劃（多 > 少）</option>
</select>
@if (laws == null)
{
    <p style="display:block;width:fit-content;margin:1rem auto;"><em>Loading...</em></p>
}
else 
{
    @if( lq.Count != 0 ) 
    {
        @foreach( var l in lq.OrderBy( l => l.LawAbandonNote ).ThenBy( l => l.LawURL ) ) 
        {
            <a class="lawresult" href="@l.LawURL&c=@a&q=@b&l=@c&ab=@d">
                <div>
                    <span class="abandoned">@l.LawAbandonNote</span>
                    @if( l.SearchResult( b , true ).Contains( "\\" ) )
                    {
                        @foreach( var r in l.SearchResult( b , true ).Split( "\\" ) ) 
                        {
                            @if( b.Contains( r ) ) 
                            {
                                <span class="matched">@r</span>
                            }
                            else 
                            {
                                @r
                            }
                        }
                    }
                    else 
                    {
                        @( l.SearchResult( b , true ) ) 
                    }
                </div>
                <div class="preview">
                    @if( l.SearchResult( b , false ).Contains( "\\" ) )
                    {
                        @foreach( var r in l.SearchResult( b , false ).Split( "\\" ) ) 
                        {
                            @if( b.Contains( r ) ) 
                            {
                                <span class="matched">@r</span>
                            }
                            else 
                            {
                                @r
                            }
                        }
                    }
                    else 
                    {
                        @( l.SearchResult( b , false ) ) 
                    }
                </div>
            </a>
        }
    }
    else 
    {
        <div id="lawnoresult">查無資料</div>
    }
}
<br class="printNoDisplay" /><a class="printNoDisplay" href="">回首頁</a>

@code {
    private LawRoot[]? laws;
    public string? a;
    public string b;
    public string? c ; 
    public string? d ; 
    public List<L> lq = new List<L>(); 
    protected override void OnInitialized()
    {
        var uri = N.ToAbsoluteUri(N.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("c", out var aaa))
        {
            a = aaa;
        }
        if (queryStrings.TryGetValue("q", out var bbb))
        {
            b = bbb;
        }
        if (queryStrings.TryGetValue("l", out var ccc))
        {
            c = ccc;
        }
        if (queryStrings.TryGetValue("ab", out var ddd))
        {
            d = ddd;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        laws = await Http.GetFromJsonAsync<LawRoot[]>("json/laws.json");
        if( laws!= null ) 
        {
            lq = laws[0].Laws.Where( l => string.IsNullOrEmpty( a ) ? true : ( a.ToUpper() == "EL" ? l.LawCategory.Contains( "選舉法規" ) : ( a.ToUpper() == "C" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "中央法規" ) ) : ( a.ToUpper() == "EX" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "行政法規" ) ) : ( a.ToUpper() == "L" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "立法法規" ) ) : ( a.ToUpper() == "J" ? ( !l.LawCategory.Contains( "選舉法規" ) && l.LawCategory.Contains( "司法法規" ) ) : true  ) ) ) ) ) ).ToList() ; 
            if( !string.IsNullOrEmpty( d ) && d == "true" ) 
            {
                lq = lq.Where( l => l.LawAbandonNote == "廢" ).ToList() ; 
            }
            else if( !string.IsNullOrEmpty( d ) && d == "false" ) 
            {
                lq = lq.Where( l => l.LawAbandonNote == "" ).ToList() ; 
            }
            if( !string.IsNullOrEmpty( c ) && ( c == "章程" || c == "法律" || c == "命令" ) ) 
            {
                lq = lq.Where( l => l.LawLevel == c ).ToList() ; 
            }
            if( !string.IsNullOrEmpty( b ) ) 
            {
                var lqq = new List<L>() ; 
                if( !Regex.IsMatch( b , @"([(].+[)])|[+\-&]" ) ) 
                {
                    foreach( var b in Regex.Replace( b , @"\s" , "\r\n" ).Split( "\r\n" ) ) 
                    {
                        lqq.AddRange( lq.Where( l => l.Contains( b ) ).Except( lqq ).ToList() ) ; 
                    }
                }
                else 
                {}
                lq = lqq ; 
            }
        }
    }
    
    public void Sort( ChangeEventArgs a ) 
    {}

    public class LawRoot
    {
        public string UpdateDate { get; set; }
        public L[] Laws { get; set; }
    }
    public class L 
    {
        public string LawLevel { get; set; }
        public string LawName { get; set; }
        public string LawURL { get; set; }
        public string LawCategory { get; set; }
        public string LawModifiedDate { get; set; }
        public string? LawEffectiveDate { get; set; }
        public string? LawEffectiveNote { get; set; }
        public string? LawAbandonNote { get; set; }
        public string LawHasEngVersion { get; set; }
        public string? EngLawName { get; set; }
        public Attachements[]? LawAttachements { get; set; }
        public string LawHistories { get; set; }
        public string? LawForeword { get; set; }
        public A[] LawArticles { get; set; }
        public bool Contains( string a ) 
        {
            if( LawName.ToUpper().Contains( a ) ) 
            {
                return true ; 
            }
            else if( LawHistories.ToUpper().Contains( a ) ) 
            {
                return true ; 
            }
            else if( string.IsNullOrEmpty( LawForeword ) ? false : LawForeword.ToUpper().Contains( a ) ) 
            {
                return true ; 
            }
            else if( LawHasEngVersion == "Y" ) 
            {
                if( EngLawName.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            foreach( var art in LawArticles ) 
            {
                if( art.ArticleType.ToUpper().Contains( a ) || ( string.IsNullOrEmpty( art.ArticleNo ) ? false : art.ArticleNo.ToUpper().Contains( a ) ) || art.ArticleContent.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            foreach( var att in LawAttachements ) 
            {
                if( att.FileName.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            return false ; 
        }
        public bool Contains( string a , string b ) 
        {
            if( b == "art" ) 
            {
                foreach( var art in LawArticles ) 
                {
                    if( art.ArticleType.ToUpper().Contains( a ) || ( string.IsNullOrEmpty( art.ArticleNo ) ? false : art.ArticleNo.ToUpper().Contains( a ) ) || art.ArticleContent.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
            }
            else if( b == "att" ) 
            {
                foreach( var att in LawAttachements ) 
                {
                    if( att.FileName.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
            }
            else if( b == "aa" ) 
            {
                foreach( var art in LawArticles ) 
                {
                    if( art.ArticleType.ToUpper().Contains( a ) || ( string.IsNullOrEmpty( art.ArticleNo ) ? false : art.ArticleNo.ToUpper().Contains( a ) ) || art.ArticleContent.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
                foreach( var att in LawAttachements ) 
                {
                    if( att.FileName.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
            }
            else if( b == "nme" ) 
            {
                if( LawName.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            else if( b == "his" ) 
            {
                if( LawHistories.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            else if( b == "fwd" ) 
            {
                if( string.IsNullOrEmpty( LawForeword ) ? false : LawForeword.ToUpper().Contains( a ) ) 
                {
                    return true ; 
                }
            }
            else if( b == "eng" ) 
            {
                if( LawHasEngVersion == "Y" ) 
                {
                    if( EngLawName.ToUpper().Contains( a ) ) 
                    {
                        return true ; 
                    }
                }
            }
            return false ; 
        }
        public string SearchResult( string aa , bool b ) 
        {
            string aaa = "" ; 
            if( b ) 
            {
                if( string.IsNullOrEmpty( aaa ) ) 
                {
                    aaa = LawName ; 
                }
                else 
                {
                    foreach( var a in Regex.Split( aa , @"\s" ) ) 
                    {
                        if( Contains( a , "nme" ) ) 
                        {
                            for( int i = 0 ; i < LawName.Split( a ).Length ; i ++ ) 
                            {
                                if( i != ( LawName.Split( a ).Length - 1 ) ) 
                                {
                                    aaa += LawName.Split( a )[i] + "\\" ; 
                                }
                                else 
                                {
                                    aaa += LawName.Split( a )[i] ; 
                                }
                            }
                        }
                    }
                }
            }
            else 
            {
                if( string.IsNullOrEmpty( aaa ) ) 
                {
                    if( !string.IsNullOrEmpty( LawForeword ) ) 
                    {
                        aaa = Regex.Replace( LawForeword , @"\s" , "" ) ; 
                    }
                    else 
                    {
                        foreach( var art in LawArticles ) 
                        {
                            if( art.ArticleType == "C" ) 
                            {
                                aaa += art.ArticleContent ; 
                            }
                            else 
                            {
                                aaa = art.ArticleContent ; 
                                break ; 
                            }
                        }
                    }        
                }
                else 
                {
                    foreach( var a in Regex.Split( aa , @"\s" ) ) 
                    {
                        if( Contains( a , "his" ) ) 
                        {
                            
                        }
                        else if( Contains( a , "fwd" ) ) 
                        {}
                        else if( Contains( a , "att" ) ) 
                        {}
                        else if( Contains( a , "art" ) ) 
                        {}
                    }
                }
            }
            return aaa ; 
        }
    }
    public class A 
    {
        public string ArticleType { get; set; }
        public string? ArticleNo { get; set; }
        public string ArticleContent { get; set; }
    }
    public class Attachements 
    {
        public string FileName { get; set; }
        public string FileURL { get; set; }
    }
}
